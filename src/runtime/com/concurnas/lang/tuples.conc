from java.util import Iterator

private abstract class Tuple(val -type Class<?>[], val elms Object...) ~ com.concurnas.bootstrap.runtime.ReifiedType, Iterable<Object>{
	override toString() => String.format("(%s)", String.join(", ", ""+i for i in elms))
	
	private class Itr ~ Iterator<Object>{
		cnt = 0
		def hasNext(){
			cnt < elms.length
		}
		
		def next() Object{
			elms[cnt++]
		}
	}
	
	def iterator() Iterator<Object>{
		new Itr()
	}
}

class Tuple2<F0, F1>(public val type Class<?>[], val -f0 F0, val -f1 F1) < Tuple(type, f0, f1){override equals(an Object) => super.equals(an)}
class Tuple3<F0, F1, F2>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2) < Tuple(type, f0, f1, f2){override equals(an Object) => super.equals(an)}
class Tuple4<F0, F1, F2, F3>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3) < Tuple(type, f0, f1, f2, f3){override equals(an Object) => super.equals(an)}
class Tuple5<F0, F1, F2, F3, F4>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4) < Tuple(type, f0, f1, f2, f3, f4){override equals(an Object) => super.equals(an)}
class Tuple6<F0, F1, F2, F3, F4, F5>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5) < Tuple(type, f0, f1, f2, f3, f4, f5){override equals(an Object) => super.equals(an)}
class Tuple7<F0, F1, F2, F3, F4, F5, F6>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6) < Tuple(type, f0, f1, f2, f3, f4, f5, f6){override equals(an Object) => super.equals(an)}
class Tuple8<F0, F1, F2, F3, F4, F5, F6, F7>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7){override equals(an Object) => super.equals(an)}
class Tuple9<F0, F1, F2, F3, F4, F5, F6, F7, F8>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8){override equals(an Object) => super.equals(an)}
class Tuple10<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9){override equals(an Object) => super.equals(an)}
class Tuple11<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10){override equals(an Object) => super.equals(an)}
class Tuple12<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11){override equals(an Object) => super.equals(an)}
class Tuple13<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12){override equals(an Object) => super.equals(an)}
class Tuple14<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13){override equals(an Object) => super.equals(an)}
class Tuple15<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14){override equals(an Object) => super.equals(an)}
class Tuple16<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15){override equals(an Object) => super.equals(an)}
class Tuple17<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16){override equals(an Object) => super.equals(an)}
class Tuple18<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17){override equals(an Object) => super.equals(an)}
class Tuple19<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18){override equals(an Object) => super.equals(an)}
class Tuple20<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18, val -f19 F19) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19){override equals(an Object) => super.equals(an)}
class Tuple21<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18, val -f19 F19, val -f20 F20) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20){override equals(an Object) => super.equals(an)}
class Tuple22<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18, val -f19 F19, val -f20 F20, val -f21 F21) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21){override equals(an Object) => super.equals(an)}
class Tuple23<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18, val -f19 F19, val -f20 F20, val -f21 F21, val -f22 F22) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22){override equals(an Object) => super.equals(an)}
class Tuple24<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23>(public val type Class<?>[], val -f0 F0, val -f1 F1, val -f2 F2, val -f3 F3, val -f4 F4, val -f5 F5, val -f6 F6, val -f7 F7, val -f8 F8, val -f9 F9, val -f10 F10, val -f11 F11, val -f12 F12, val -f13 F13, val -f14 F14, val -f15 F15, val -f16 F16, val -f17 F17, val -f18 F18, val -f19 F19, val -f20 F20, val -f21 F21, val -f22 F22, val -f23 F23) < Tuple(type, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23){override equals(an Object) => super.equals(an)}
