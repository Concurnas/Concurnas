/** This module is auto imported*/
from java.util import Iterator
from java.util.stream import Stream

class SequenceException(msg String) < Exception(msg)

class IntSequence(fromx int, tox Integer) ~ Iterable<Integer>{
	step Integer? = null
	ascending = true
			
	init{
		if(tox <> null){
			this.ascending = tox >== fromx
		}
	}
	
	def step(step int){
		this.step = step
		if(tox <> null){
			if(step <== 0){
				throw new SequenceException("step of {step} must be greater than 0 (unless sequence is infinite)")
			}
		}
		
		this
	}
	
	def reversed(){
		if(tox == null){
			throw new SequenceException("Only bounded sequences can be reversed")
		}else{
			ret = IntSequence(tox, fromx)
			if(step <> null){
				ret.step(step??)
			}
			ret
		}
	}
	
	def \in(what int){
		thestep = step if step <> null else 1
		
		if( (what - fromx)  mod thestep == 0){
			if(tox <> null){//bound
				(fromx <== what and what <== tox) if ascending else (tox <== what and what <== fromx)
			}else{//infinite
				fromx <== what if thestep > 0 else fromx >== what
			}
		}else{
			false
		}
	}
	
	def iterator() Iterator<Integer>{
		ret = class(currentx int, tox Integer, stepx int, ascending boolean) ~ Iterator<Integer>{
			def hasNext(){
				if(tox == null){
					true
				}else{
					currentx <== tox if ascending else currentx >== tox
				}
			}
			
			def next() Integer{
				retx = currentx
				currentx += stepx if ascending else -stepx
				retx
			}
		}
		ret(fromx, tox, 1 if not step else step??, ascending)
	}
	
	def stream() Stream<Integer> => (x for x in this).stream()
	
	override toString(){
		ret =  "{fromx} to {tox if tox else '...'}"
		
		if(step){
			ret+= " step {step}"
		}
		ret
	}
}

class LongSequence(fromx long, tox Long) ~ Iterable<Long>{
	step Long? = null
	ascending = true
			
	init{
		if(tox <> null){
			this.ascending = tox >== fromx
		}
	}
	
	def step(step long){
		this.step = step
		if(tox <> null){
			if(step <== 0){
				throw new SequenceException("step of {step} must be greater than 0 (unless sequence is infinite)")
			}
		}
		
		this
	}
	
	def reversed(){
		if(tox == null){
			throw new SequenceException("Only bounded sequences can be reversed")
		}else{
			ret = LongSequence(tox, fromx)
			if(step <> null){
				ret.step(step??)
			}
			ret
		}
	}
	
	def \in(what long){
		thestep long = step if step <> null else 1
		
		if( (what - fromx)  mod thestep == 0){
			if(tox <> null){//bound
				(fromx <== what and what <== tox) if ascending else (tox <== what and what <== fromx)
			}else{//infinite
				fromx <== what if thestep > 0 else fromx >== what
			}
		}else{
			false
		}
	}
	
	def iterator() Iterator<Long>{
		ret = class(currentx long, tox Long, stepx long, ascending boolean) ~ Iterator<Long>{
			def hasNext(){
				if(tox == null){
					true
				}else{
					currentx <== tox if ascending else currentx >== tox
				}
			}
			
			def next() Long{
				retx = currentx
				currentx += stepx if ascending else -stepx
				retx
			}
		}
		ret(fromx, tox, 1 if not step else step??, ascending)
	}
	
	def stream() Stream<Long> => (x for x in this).stream()
	
	override toString(){
		ret =  "{fromx} to {tox if tox else '...'}"
		
		if(step){
			ret+= " step {step}"
		}
		ret
	}
}

//extension functions...
//ints
public def int to(tox Integer = null) {
	IntSequence(this, tox)
}

//longs
public def long to(tox Long = null) {
	LongSequence(this, tox)
}

public def int to(tox Long) {
	LongSequence(this, tox)
}

public def long to(tox Integer) {
	LongSequence(this, tox as long)
}

