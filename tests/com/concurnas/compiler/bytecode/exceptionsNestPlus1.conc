//##0.0.0.1 triple reboot - 1 simple a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	return 2
} finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.0.2 triple reboot - 1 simple b 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	return 2 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##99.1 - nice and basic fin call
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

ok=0
def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	ok++;
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		return mycall(fail, ff); 
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2){
		catchCall =2
	}
	finally{
		fincall()
	}
	return g } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}

~~~~~
//##99.2 - nice and basic fin call 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

ok=0
def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	ok++;
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		if(ff==0){ 	return mycall(fail, ff); }
		elif(ff==1) { return 456;}
		else{ return 7;}
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2){
		catchCall =2
	}
	finally{
		fincall()
	}
	return g } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}

~~~~~
//##99.2 - nice and basic fin call 3
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0; ok=0

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	ok++;
	return 888; 
}
def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		//if(ff==0){ 	return mycall(fail, ff); }
		//elif(ff==1) { return 456;}
		//else{ return 7;}
		 mycall(fail, ff); 
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2){
		catchCall =2
	}
	finally{
		fincall()
		g +=100;
		x=9
		{ a = 8 }
		
		if(fail){ 	a = 8	}
		
		h=99
		ok = h
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}

~~~~~
//##99.2 - nice and basic fin call 4
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0; ok=0

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	ok++;
	return 888; 
}
def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		//if(ff==0){ 	return mycall(fail, ff); }
		//elif(ff==1) { return 456;}
		//else{ return 7;}
		return mycall(fail, ff); 
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2){
		catchCall =2
	}
	finally{
		fincall()
		g +=100;
		x=9
		{ a = 8 }
		
		if(fail){ 	a = 8	}
		
		h=99
		ok = h
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}

~~~~~
//##99.2 - nice and basic fin call 5
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0; ok=0

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	ok++;
	return 888; 
}
def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		if(ff==0){ 	return mycall(fail, ff); }
		elif(ff==1) { return 456;}
		else{ return 7;}
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2){
		catchCall =2
	}
	finally{
		fincall()
		g +=100;
		x=9
		{ a = 8 }
		
		if(fail){ 	a = 8	}
		
		h=99
		ok = h
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}


~~~~~
//##0.0.1 double reboot - 1 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
	}
	return 3 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true),  runner(false, true),
				  runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 1b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80)
		
	} } finally{ finNplus1() }
	//throw new IntExcep(80)
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##0.0.1 double reboot - 1b complex fin block needs copy
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }
def xxx()=>true
ok=0
def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		if(fail){ 	return mycall(fail, ff); }
		elif(ff==0) { return 456;}
		else{ return 7;} 
	}
	catch(e Excep3){
		catchCall =3
	}
	finally{
		fincall()
		g +=100;
		x=9
		{ a = 8 }
		
		if(xxx()){ 	a = 8	}
		
		h=99
		ok = h
		
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 1c no fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

ok=0
def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		if(fail){ 	return mycall(fail, ff); }
		elif(ff==0) { return 456;}
		else{ return 7;} 
	}
	catch(e Excep3){
		catchCall =3
	}
	finally{
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt , ok] + " :: " + finNestPlus1
}


~~~~~
//##0.0.1 double reboot - 1 locals in fin a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	a=9
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); 
	}
	finally{
		x=9 + a
		fincnt+=1
	}
	return 2 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 1 locals in fin b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	a=9
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); 
	}
	finally{
		x=9 + a
		fincnt+=1
	}
	return 2 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 2 nothing in fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	a=9
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); 
	}
	finally{
	}
	return 2 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##0.0.1 double reboot - 2 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 3 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 4 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); //return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80) 
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 5
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		callCatch1(); //return 10
	}
	catch(e Throwable){
		callCatch1(); return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80) 
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 2b 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 3b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 4b 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); //return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		callOnFinal1()//return 8
		throw new IntExcep(80) 
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##0.0.1 double reboot - 5b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); //return 10
	}
	catch(e Throwable){
		callCatch1(); return 10
	}
	finally{
		callOnFinal1()//return 8
		//throw new IntExcep(80) - Non Normal Complete - we dont permit this
	}
	throw new IntExcep(80) } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##0.0.2 double reboot
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return mycall(fail) }
	}
	catch(e Exception){
		catchCall++
		//return 10
	}
	catch(e Throwable){
		catchCall++
		//return 10
	}
	finally{
		callOnFinal1()
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu		}}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##0.0.3 more the merry
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{ override equals(o Object) boolean{return true;} }
cnt = 0; fincnt = 0; catchCall = 0;
def callCatch1() { catchCall++ }
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; }

def callOnFinal1(){	fincnt+=1 }
def da2(fail boolean, f2 boolean) int{
try{
	a=9
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		callCatch1(); return 10
	}
	catch(e Throwable){
		callCatch1(); //return 10
	}
	finally{
		x=9 + a
	}
	return 2 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){ return e.valu } }

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##0.1 reboot - simple 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
	}
	catch(e Excep2  ){
		catchCall =2
		return g
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return g
	}
	catch(e Excep2  ){
		catchCall =2
		//return g
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 3
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int) int{
try{
	g=0;
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return g
	}
	catch(e Excep2  ){
		catchCall =2
		//return g
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 4
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		if(b) {return mycall(fail, ff) }
		
	}
	catch(e Excep3){
		catchCall =3
		//return g
	}
	catch(e Excep2  ){
		catchCall =2
		//return g
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 5
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	
	try{ 
		if(b) {return mycall(fail, ff) }
	}
	catch(e Excep3){
		{catchCall =3
		return 3}
	}
	catch(e Excep2  ){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		fincall()
		g +=100;
		//return g- Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}


~~~~~
//##0.1 reboot - simple 6 - skip over exceptions
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		//if(b) {return mycall(fail, ff) }
		return mycall(fail, ff)
	}
	catch(e Excep3){
		{catchCall =3
		throw new Exception("")
		}
	}
	catch(e Excep2  ){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		//throw new Exception("")
	}
	finally{
		fincall()
		g +=100;
		//return g
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 7 - all throw
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		//if(b) {return mycall(fail, ff) }
		return mycall(fail, ff)
	}
	catch(e Excep3){
		{catchCall =3
		throw new Exception("")
		}
	}
	catch(e Excep2  ){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		fincall()
		g +=100;
		//return g
	} } finally{ finNplus1() }
	//return g
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 8 - most complex exception case
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		//if(b) {return mycall(fail, ff) }
		return mycall(fail, ff)
	}
	catch(e Excep3){
		{catchCall =3
		throw new Exception("")
		}
	}
	catch(e Excep2  ){
		catchCall =2
		//throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		fincall()
		g +=100;
		//return g
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 9 - most complex exception case with early ret

finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		//if(b) {return mycall(fail, ff) }
		return mycall(fail, ff)
	}
	catch(e Excep3){
		{catchCall =3
		//throw new Exception("")
		}
	}
	catch(e Excep2  ){
		catchCall =2
		//throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		fincall()
		g +=100;
		//return g - Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.1 reboot - simple 10 - most complex exception case with early ret branch in try
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

def da2(fail boolean, ff int, b boolean) int{
try{
	g=0;
	try{ 
		if(b) {return mycall(fail, ff) }
		//return mycall(fail, ff)
	}
	catch(e Excep3){
		{catchCall =3
		//throw new Exception("")
		}
	}
	catch(e Excep2  ){
		catchCall =2
		//throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		fincall()
		g +=100;
		//return g - Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - split inside catch block 1
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){ return 999 } //else{ g+=909;  }
		throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100; //return g
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - split inside catch block 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){ return 999 } //else{ g+=909;  }
		else {throw e }
		//throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100; //return g
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - catchs end in exception and fin block rets
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
catchCalll2a  = 0
catchCalll1a  = 0
f1=0; 

def catchCall2a() {	catchCalll2a++}
def catchCall1a() {	catchCalll1a++}

def fincall1() {	f1++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		mycall(fail, theOne)
		return 9
	}
	catch(he Excep2){
		catchCall2a();
		if(throwa){ throw he; } 
	}
	catch(he Excep1){
		catchCall1a();
		if(throwa){ throw he; } 
	}
	finally{  
		fincall1(); 
		//return 66 - Non Normal Complete - we dont permit this
	}
	return 66 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll1a  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a  catchCalll2a res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ catchCalll2a, catchCalll1a, f1 ] + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - catchs end in exception and fin block non def rets
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll1a  = 0
f1=0; 

def catchCall2a() {	catchCalll2a++}
def catchCall1a() {	catchCalll1a++}

def fincall1() {	f1++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		mycall(fail, theOne)
		return 9
	}
	catch(he Excep2){
		catchCall2a();
		if(throwa){ throw he; } 
	}
	catch(he Excep1){
		catchCall1a();
		if(throwa){ throw he; } 
	}
	finally{  
		fincall1(); 
	}
	return 66 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll1a  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a  catchCalll2a res]
} 

def doings() String{
	return ""  + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ catchCalll2a, catchCalll1a, f1 ] + " :: " + finNestPlus1
}


~~~~~
//##0.2 reboot - split inside catch block 3
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){  throw e } //else{ g+=909;  }
		//else {  return 999 }
		//throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100; //return g
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}



~~~~~
//##0.2 reboot - split inside catch block 1 - ret fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){ return 999 } //else{ g+=909;  }
		throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100; 
		//return g - Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - split inside catch block 2 - ret fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){ return 999 } //else{ g+=909;  }
		else {throw e }
		//throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100; 
		//return g - Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.2 reboot - split inside catch block 3 - ret fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}
cnt = 0; fincnt = 0; catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def fincall() { fincnt++; }

g=0;

def da2(fail boolean, ff int, b boolean) int{
try{
	try{ 
		return mycall(fail, ff) 
	}
	catch(e Excep3){
		{	catchCall =3
		}
	}
	catch(e Excep2  ){
		catchCall =2
		if(b){  throw e } //else{ g+=909;  }
		//else {  return 999 }
		//throw e
	}
	catch(e Excep1){
		catchCall =1
	}
	finally{
		fincall()
		g +=100;
		//return g - Non Normal Complete - we dont permit this
	}
	return g } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	g=0;
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res g]
}

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  fincnt + " :: " + finNestPlus1
}

~~~~~
//##0.3 reboot - supress final goto in catch block if fin visited instruction even in branch is a throws
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
\also = 0

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def catchCall1() {
	catchCall = 1
}

def catchCall2() {
	catchCall = 2
}

def catchCall3() {
	catchCall = 3 
}

def da2(fail boolean, ff int, f2 boolean) int{
try{
	try{ 
		mycall(fail, ff)
		return 9
	}
	catch(e Excep3){
		{	catchCall3();
		}
	}
	catch(e Excep2){
		catchCall2()
		if(not f2){ }//naughty, i wanted to test if this style worked
		else { throw e; }//also we supress the goto at the end here
	}
	catch(e Excep1){
		catchCall1();
	}
	cnt+=1
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, ff int, b boolean) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff, b); }	catch(t Throwable){}
	return [catchCall res]
} 

def doings() String{
	return "" + [ doer(true, 1, true), doer(false, 1, true),
				  doer(true, 2, true), doer(false, 2, true),
				  doer(true, 3, true), doer(false, 3, true),] + "\n" +  \
			    [ doer(true, 1, false), doer(false, 1, false),
				  doer(true, 2, false), doer(false, 2, false),
				  doer(true, 3, false), doer(false, 3, false),] + "\n" +  \
				  cnt + " :: " + finNestPlus1
}






~~~~~
//##1. test one excep - def ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall() int { return ++cnt; }
def mycall3() int { return ++cnt; }

def da2() int{
try{
	try{ 
		return mycall()
	}
	catch(e Exception){
		return mycall3()
	} } finally{ finNplus1() }
}

def doings() String{
	x= da2()
	return "" + [x, cnt] + " :: " + finNestPlus1
}

~~~~~
//##2. test one excep - non def ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ throw new Exception("ee"); }
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }



def da2(f boolean) int{
try{
	try{ 
		mycall(f)
	}
	catch(e Exception){
		return mycall3()
	}
	return 77 } finally{ finNplus1() }
}


def doings() String{
	return "" + [da2(false), cnt, da2(true), cnt] + " :: " + finNestPlus1
}

~~~~~
//##3. test one excep - def ret thingy
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }

def testMeth(f boolean, g boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		else { 	return mycall(false) }
	}
	catch(e Exception){
		 return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false), cnt, 
				 testMeth(true, false), cnt,
				 testMeth(false, true), cnt,
				 testMeth(true, true), cnt ] + " :: " + finNestPlus1
}

~~~~~
//##4. test one excep - def ret thingy 3 non nesting
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }
def anotherCall() int { return 100; }



def testMeth(f boolean, g boolean, z boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		elif(z) { 	return anotherCall() }
		else { 	return mycall(false) }
	}
	catch(e Exception){
		 return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, false), cnt, 
				 testMeth(true, false, false), cnt,
				 testMeth(false, true, false), cnt,
				 testMeth(true, true, false), cnt,
				 testMeth(false, false, true), cnt, 
				 testMeth(true, false, true), cnt,
				 testMeth(false, true, true), cnt,
				 testMeth(true, true, true), cnt ] + " :: " + finNestPlus1
}


~~~~~
//##5. test one excep - def ret thingy NESTING
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }

def anotherCall() int { return 100; }


def testMeth(f boolean, g boolean, z boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		else{
			if(z) { 	return anotherCall() }
			else { 	return mycall(false) }
		}
	}
	catch(e Exception){
		 return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, false), cnt, 
				 testMeth(true, false, false), cnt,
				 testMeth(false, true, false), cnt,
				 testMeth(true, true, false), cnt,
				 testMeth(false, false, true), cnt, 
				 testMeth(true, false, true), cnt,
				 testMeth(false, true, true), cnt,
				 testMeth(true, true, true), cnt ] + " :: " + finNestPlus1
}

~~~~~
//##6. tag if statement carryOn - tag all relevant
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean) int{
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		//g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true), //40
				 testMeth(true,  false, true,  true), //40
				 testMeth(false, true,  true,  true), //10
				 testMeth(true,  true,  true,  true), //40
				 testMeth(false, false, false, true), //20
				 testMeth(true,  false, false, true), //40
				 testMeth(false, true,  false, true), //10
				 testMeth(true,  true,  false, true), //40
				 testMeth(false, false, true,  false), //40
				 testMeth(true,  false, true,  false), //40
				 testMeth(false, true,  true,  false), //10
				 testMeth(true,  true,  true,  false), //40
				 testMeth(false, false, false, false), //30
				 testMeth(true,  false, false, false), //40
				 testMeth(false, true,  false, false),  //10
				 testMeth(true,  true,  false, false), ] + " :: " + finNestPlus1 //40
}

~~~~~
//##7. tag if statement carryOn - supress
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean) int{
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true), //40
				 testMeth(true,  false, true,  true), //40
				 testMeth(false, true,  true,  true), //11
				 testMeth(true,  true,  true,  true), //40
				 testMeth(false, false, false, true), //21
				 testMeth(true,  false, false, true), //40
				 testMeth(false, true,  false, true), //11
				 testMeth(true,  true,  false, true), //40
				 testMeth(false, false, true,  false), //40
				 testMeth(true,  false, true,  false), //40
				 testMeth(false, true,  true,  false), //11
				 testMeth(true,  true,  true,  false), //40
				 testMeth(false, false, false, false), //31
				 testMeth(true,  false, false, false), //40
				 testMeth(false, true,  false, false),  //11
				 testMeth(true,  true,  false, false), ] + " :: " + finNestPlus1//40
}

~~~~~
//##8. elifs - break
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			return 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
}


~~~~~
//##9. elifs - no break just have alloc
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			g = 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
}

~~~~~
//##10. elifs - more than one break early
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			return 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ return 30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)]  + " :: " + finNestPlus1//40
}

~~~~~
//##11. misc empty line
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			//return 90 //look im empty
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ return 30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
	
	//return ""
}

~~~~~
//##12. elif non defo returns - final thing is a ret - a 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}//else{}
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##13. elif non defo returns - final thing is a ret - b 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}else{}
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##14. elif non defo returns - final thing is a ret with a twist- c
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}

		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}



~~~~~
//##15. nested if - a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
			return someCall(90)
			}
		}
		//g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##16. nested if - b - stuff after
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				return someCall(90)
			}
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##17. nested if - c - stuff after - another variant
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				g +=  someCall(95)
			}
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##18. nested if - c - stuff after - another variant2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				g +=  someCall(95)
			}
		}
		elif(not another){
			g+=3
			return g
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##19. the throwing of exceptions
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}

}

//, fail2 boolean
def testMeth(fail1 boolean) int {
try{
	try{ 
		if(fail1){
			throw new IntExcep(22)
		}
	}
	catch(e IntExcep){
		 return e.valu
	}
	
	return 99 } finally{ finNplus1() }
}

def testMethAlwaysThrows1(fail1 boolean) int {
try{
	try{ 
		if(fail1){ throw new IntExcep(22) }
		else { throw new IntExcep(33) }
	}
	catch(e IntExcep){
		 return e.valu
	} } finally{ finNplus1() }
	
	//return 99
}

def testMethAlwaysThrows2() int {
try{
	try{ 
		throw new IntExcep(22)
	}
	catch(e IntExcep){
		 return e.valu
	} } finally{ finNplus1() }
	
	//return 99
}


def doings() String{
	return "" + [testMeth(true), testMeth(false)] \ 
			  + "\n" +  [testMethAlwaysThrows1(true), testMethAlwaysThrows1(false)] \ 
			  + "\n" +  testMethAlwaysThrows2() + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-1. test one excep - def ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;

def mycall() int { return ++cnt; }
def mycall3() int { return ++cnt; }

def da2() int{
try{
	try{ 
		return mycall()
	}
	catch(e Exception){
		return mycall3()
	}
	catch(e Throwable){
		return mycall3()
	} } finally{ finNplus1() }
}

def doings() String{
	x= da2()
	return "" + [x, cnt] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-2. test one excep - non def ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ throw new Exception("ee"); }
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }



def da2(f boolean) int{
try{
	try{ 
		mycall(f)
	}
	catch(e Exception){
		return mycall3()
	}
	catch(e Throwable){
		return mycall3()
	}
	return 77 } finally{ finNplus1() }
}


def doings() String{
	return "" + [da2(false), cnt, da2(true), cnt] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-3. test one excep - def ret thingy
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }

def testMeth(f boolean, g boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		else { 	return mycall(false) }
	}
	catch(e Exception){
		 return 78
	}
	catch(e Throwable){
		return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false), cnt, 
				 testMeth(true, false), cnt,
				 testMeth(false, true), cnt,
				 testMeth(true, true), cnt ] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-4. test one excep - def ret thingy 3 non nesting
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }
def anotherCall() int { return 100; }



def testMeth(f boolean, g boolean, z boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		elif(z) { 	return anotherCall() }
		else { 	return mycall(false) }
	}
	catch(e Exception){
		 return 78
	}
	catch(e Throwable){
		return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, false), cnt, 
				 testMeth(true, false, false), cnt,
				 testMeth(false, true, false), cnt,
				 testMeth(true, true, false), cnt,
				 testMeth(false, false, true), cnt, 
				 testMeth(true, false, true), cnt,
				 testMeth(false, true, true), cnt,
				 testMeth(true, true, true), cnt ] + " :: " + finNestPlus1
}


~~~~~
//##2-manyE-5. test one excep - def ret thingy NESTING
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ++cnt; }
}

def mycall3() int { return ++cnt; }

def anotherCall() int { return 100; }


def testMeth(f boolean, g boolean, z boolean) int{
try{
	try{ 
		if(g){ 	return mycall(f) }
		else{
			if(z) { 	return anotherCall() }
			else { 	return mycall(false) }
		}
	}
	catch(e Exception){
		 return 78
	}
	catch(e Throwable){
		return 78
	} } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, false), cnt, 
				 testMeth(true, false, false), cnt,
				 testMeth(false, true, false), cnt,
				 testMeth(true, true, false), cnt,
				 testMeth(false, false, true), cnt, 
				 testMeth(true, false, true), cnt,
				 testMeth(false, true, true), cnt,
				 testMeth(true, true, true), cnt ] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-6. tag if statement carryOn - tag all relevant
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean) int{
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		//g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true), //40
				 testMeth(true,  false, true,  true), //40
				 testMeth(false, true,  true,  true), //10
				 testMeth(true,  true,  true,  true), //40
				 testMeth(false, false, false, true), //20
				 testMeth(true,  false, false, true), //40
				 testMeth(false, true,  false, true), //10
				 testMeth(true,  true,  false, true), //40
				 testMeth(false, false, true,  false), //40
				 testMeth(true,  false, true,  false), //40
				 testMeth(false, true,  true,  false), //10
				 testMeth(true,  true,  true,  false), //40
				 testMeth(false, false, false, false), //30
				 testMeth(true,  false, false, false), //40
				 testMeth(false, true,  false, false),  //10
				 testMeth(true,  true,  false, false), ] + " :: " + finNestPlus1//40
}

~~~~~
//##2-manyE-7. tag if statement carryOn - supress
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean) int{
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true), //40
				 testMeth(true,  false, true,  true), //40
				 testMeth(false, true,  true,  true), //11
				 testMeth(true,  true,  true,  true), //40
				 testMeth(false, false, false, true), //21
				 testMeth(true,  false, false, true), //40
				 testMeth(false, true,  false, true), //11
				 testMeth(true,  true,  false, true), //40
				 testMeth(false, false, true,  false), //40
				 testMeth(true,  false, true,  false), //40
				 testMeth(false, true,  true,  false), //11
				 testMeth(true,  true,  true,  false), //40
				 testMeth(false, false, false, false), //31
				 testMeth(true,  false, false, false), //40
				 testMeth(false, true,  false, false),  //11
				 testMeth(true,  true,  false, false), ] + " :: " + finNestPlus1//40
}

~~~~~
//##2-manyE-8. elifs - break
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			return 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
}


~~~~~
//##2-manyE-9. elifs - no break just have alloc
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			g = 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ g=30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
}

~~~~~
//##2-manyE-10. elifs - more than one break early
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			return 90
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ return 30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)]  + " :: " + finNestPlus1//40
}

~~~~~
//##2-manyE-11. misc empty line
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def testMeth(fail1 boolean, ret1 boolean, fail2 boolean, ret2 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 	g=10 }
		elif(another){
			//return 90 //look im empty
		}
		else{
			if(mycall(fail2, ret2)){ 	g= 20 } //ret 70
			else{ return 30 }
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	
	return "" + [testMeth(false, false, true,  true,  true), //90
				 testMeth(true,  false, true,  true,  true), //
				 testMeth(false, true,  true,  true,  true), //
				 testMeth(true,  true,  true,  true,  true), //
				 testMeth(false, false, false, true,  true), //90
				 testMeth(true,  false, false, true,  true), //
				 testMeth(false, true,  false, true,  true), //
				 testMeth(true,  true,  false, true,  true), //
				 testMeth(false, false, true,  false,  true), //90
				 testMeth(true,  false, true,  false,  true), //
				 testMeth(false, true,  true,  false,  true), //
				 testMeth(true,  true,  true,  false,  true), //
				 testMeth(false, false, false, false,  true), //90
				 testMeth(true,  false, false, false,  true), //
				 testMeth(false, true,  false, false,  true),  //
				 testMeth(true,  true,  false, false,  true) //
				] + "\n" +  \	
				[ testMeth(false, false, true,  true, false), //40
				 testMeth(true,  false, true,  true, false), //40
				 testMeth(false, true,  true,  true, false), //11
				 testMeth(true,  true,  true,  true, false), //40
				 testMeth(false, false, false, true, false), //21
				 testMeth(true,  false, false, true, false), //40
				 testMeth(false, true,  false, true, false), //11
				 testMeth(true,  true,  false, true, false), //40
				 testMeth(false, false, true,  false, false), //40
				 testMeth(true,  false, true,  false, false), //40
				 testMeth(false, true,  true,  false, false), //11
				 testMeth(true,  true,  true,  false, false), //40
				 testMeth(false, false, false, false, false), //31
				 testMeth(true,  false, false, false, false), //40
				 testMeth(false, true,  false, false, false),  //11
				 testMeth(true,  true,  false, false, false)] + " :: " + finNestPlus1 //40
	
	//return ""
}

~~~~~
//##2-manyE-12. elif non defo returns - final thing is a ret - a 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}//else{}
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-13. elif non defo returns - final thing is a ret - b 
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}else{}
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-14. elif non defo returns - final thing is a ret with a twist- c
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		elif(another){
			return someCall(90)
		}

		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}



~~~~~
//##2-manyE-15. nested if - a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
			return someCall(90)
			}
		}
		//g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-16. nested if - b - stuff after
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				return someCall(90)
			}
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-17. nested if - c - stuff after - another variant
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				g +=  someCall(95)
			}
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-18. nested if - c - stuff after - another variant2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

def mycall(fail boolean, ret boolean) boolean { 
	if(fail){ 
		throw new Exception("ee"); 
	}
	else{ return ret; }
}

def someCall(a int) int{ return a; } 

def testMeth(fail1 boolean, ret1 boolean, another boolean) int {
try{
	g=0
	try{ 
		if(mycall(fail1, ret1)){ 
			return someCall(30)
		 }
		 
		if(another){
			if(another){
				g +=  someCall(95)
			}
		}
		elif(not another){
			g+=3
			return g
		}
		g+=1
	}
	catch(e Exception){
		 g= 40
	}
	catch(e Throwable){
		g= 40
	}
	
	return g } finally{ finNplus1() }
}


def doings() String{
	return "" + [testMeth(false, false, true),  //90
				 testMeth(true,  false, true),  //40
				 testMeth(false, true,  true),  //30
				 testMeth(true,  true,  true),  //40
				 testMeth(false, false, false), //0
				 testMeth(true,  false, false), //40
				 testMeth(false, true,  false), //30
				 testMeth(true,  true,  false)  //40
				] + " :: " + finNestPlus1
}

~~~~~
//##2-manyE-19. the throwing of exceptions
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}

}

//, fail2 boolean
def testMeth(fail1 boolean) int {
try{
	try{ 
		if(fail1){
			throw new IntExcep(22)
		}
	}
	catch(e IntExcep){
		 return e.valu
	}
	catch(e Throwable){
		return 101
	}
	
	return 99 } finally{ finNplus1() }
}

def testMethAlwaysThrows1(fail1 boolean) int {
try{
	try{ 
		if(fail1){ throw new IntExcep(22) }
		else { throw new IntExcep(33) }
	}
	catch(e IntExcep){
		 return e.valu
	}
	 } finally{ finNplus1() }
	//return 99
}

def testMethAlwaysThrows2() int {
try{
	try{ 
		throw new IntExcep(22)
	}
	catch(e IntExcep){
		 return e.valu
	}
	catch(e Throwable){
		return 101
	}
	 } finally{ finNplus1() }
	//return 99
}


def doings() String{
	return "" + [testMeth(true), testMeth(false)] \ 
			  + "\n" + [testMethAlwaysThrows1(true), testMethAlwaysThrows1(false)] \ 
			  + "\n" + testMethAlwaysThrows2() + " :: " + finNestPlus1
}


~~~~~
//##30.1 finally - basic
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		mycall(fail)
		
	}
	catch(e Exception){
		g =20
	}
	finally{
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [da2(true), da2(false), cnt] + " :: " + finNestPlus1
}

~~~~~
//##30.1.b finally - basic - 2 catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		mycall(fail)
		
	}
	catch(e Exception){
		g =20
	}
	catch(e Throwable){
		g =20
	}
	finally{
		g +=100;
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [da2(true), da2(false), cnt] + " :: " + finNestPlus1
}


~~~~~
//##30.2 finally - no catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean) int{//no catch
try{
	g=0;
	try{ 
		mycall(fail)
	}
	finally{
		g +=100;
		cnt+=200
	}
	return g } finally{ finNplus1() }
}


def doings() String{
	try{
		da2(true)
	}
	catch(e Exception){
		
	}

	return "" + [ da2(false), cnt] + " :: " + finNestPlus1
}

~~~~~
//##30.3 finally - early exception
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def excepCall(){}
def excepCall2(){}
def callOnFinal(){}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		excepCall()
	}
	catch(e Throwable){
		excepCall2()
	}
	finally{
		callOnFinal()
		g+=10
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [da2(true), da2(false), cnt] + " :: " + finNestPlus1
}

~~~~~
//##30.4 finally - many cath blocks
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def excepCall(){}
def callOnFinal(){}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		g=mycall(fail)
		//return mycall(fail)
	}
	catch(e Exception){
		excepCall()
	}
	catch(e Throwable){
		excepCall()
	}
	finally{
		callOnFinal()
		g+=10
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [da2(true), da2(false), cnt] + " :: " + finNestPlus1
}

~~~~~
//##30.5 finally - many cath blocks defo return
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def excepCall(){}
def callOnFinal(){}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		excepCall()
	}
	catch(e Throwable){
		excepCall()
	}
	finally{
		callOnFinal()
		g+=10
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [da2(true), da2(false), cnt] + " :: " + finNestPlus1
}

~~~~~
//##30.6 finally - no catch with early break return
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	finally{
		callOnFinal()
	} } finally{ finNplus1() }
}

def doings() String{
	try{
		da2(true)
	}
	catch(e ){
	}
	return "" + [ da2(false), cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.7 finally - no early break
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		g+= mycall(fail)
	}
	finally{
		callOnFinal()
	}
	return g } finally{ finNplus1() }
}

def doings() String{
	
	try{
		da2(true)
	}
	catch(e ){
	}
	return "" + [ da2(false), cnt, fincnt] + " :: " + finNestPlus1
}


~~~~~
//##30.8 finally - return in finally block
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		mycall(fail)
	}
	finally{
		callOnFinal()
		//return 10 - Non Normal Complete - we dont permit this
	}
	return 10 } finally{ finNplus1() }
}

def runner(fail boolean) int {
	try{ return da2(fail); } catch(e){}
	return 9
}

def doings() String{
	return "" + [ runner(true), runner(false), cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.9 finally - return in finally block also in main block
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	g=0;
	try{ 
		return mycall(fail)
	}
	finally{
		callOnFinal()
		//return 10 - Non Normal Complete - we dont permit this
	} } finally{ finNplus1() }
}

def runner(fail boolean ) int {
	try{ return da2(fail); } catch(e){}
	return 99
}

def doings() String{
	return "" + [ runner(true), runner(false), cnt, fincnt] + " :: " + finNestPlus1
}


~~~~~
//##30.10 finally - conditional inside the finally block
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	finally{
		callOnFinal1()
		//if(f2){return 10 } - Non Normal Complete - we dont permit this
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e Throwable){}
	return 90
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true), 
				  runner(true, false), runner(false, false), 
				  cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.11 finally - no early return here
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	finally{
		callOnFinal1()
		//if(f2){return 10 } - Non Normal Complete - we dont permit this
	}
	if(f2){return 10 }
	return 80 } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e Throwable){}
	return 90
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true), 
				  runner(true, false), runner(false, false), 
				  cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.12 finally - branch inside the tryblock
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean, f3 boolean) int{
try{
	try{ 
		if(f3){ return 99 }
		mycall(fail)
	}
	finally{
		callOnFinal1()
		//if(f2){return 10 } - Non Normal Complete - we dont permit this
	}
	if(f2){return 10 }
	return 80 } finally{ finNplus1() }
}

def runner(a boolean, b boolean, c boolean) int{
	try{ return da2(a,b,c) }
	catch(e Throwable){}
	return 90
}

def doings() String{
	return "" + [ runner(true, true, true), runner(false, true, true), 
				  runner(true, false, true), runner(false, false, true), 
				  runner(true, true, false), runner(false, true, false), 
				  runner(true, false, false), runner(false, false, false), 
				  cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.13 finally - branch inside the tryblock defo fin return
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean, f3 boolean) int{
try{
	try{ 
		if(f3){ return 99 }
		mycall(fail)
	}
	finally{
		callOnFinal1()
		//return 10 - Non Normal Complete - we dont permit this
	}
	return 10 } finally{ finNplus1() }
}

def runner(a boolean, b boolean, c boolean) int{
	try{ return da2(a,b,c) }
	catch(e Throwable){}
	return 90
}

def doings() String{
	return "" + [ runner(true, true, true), runner(false, true, true), 
				  runner(true, false, true), runner(false, false, true), 
				  runner(true, true, false), runner(false, true, false), 
				  runner(true, false, false), runner(false, false, false), 
				  cnt, fincnt] + " :: " + finNestPlus1
}


~~~~~
//##30.14 MISC finally - ensure correct type poped when ignoring thing put on stack code defo ret overrides it

finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) double{
try{
	try{ 
		return 52.
	}
	finally{
		callOnFinal1()
		//return 10 - Non Normal Complete - we dont permit this
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) double{
	try{ return da2(a,b) }
	catch(e Throwable){}
	return 90
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true), 
				  runner(true, false), runner(false, false), 
				  cnt, fincnt] + " :: " + finNestPlus1
}

~~~~~
//##30.15.a finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		{
			catchCall =3
			return 10
		}//ok inside anon block too
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	} } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.b finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		//return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.c finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.d finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 10
	}
	catch(e Excep2){
		catchCall =2
		//return 10
	}
	catch(e Excep1){
		catchCall =1
		//return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.e finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff);// return x
	}
	catch(e Excep3){
		catchCall =3
		return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.f finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); return x
	}
	catch(e Excep3){
		catchCall =3
		//return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.ff finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); return x
	}
	catch(e Excep3){
		catchCall =3
		//return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		//return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
		return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.g finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); //return x
	}
	catch(e Excep3){
		catchCall =3
		return 10
	}
	catch(e Excep2){
		catchCall =2
		return 10
	}
	catch(e Excep1){
		catchCall =1
		//return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
		return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.h finally - many catch, with ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); //return x
	}
	catch(e Excep3){
		catchCall =3
		//return 10
	}
	catch(e Excep2){
		catchCall =2
		//return 10
	}
	catch(e Excep1){
		catchCall =1
		//return 10
	}
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 100
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.a finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		callOnFinal1()
	} } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.b finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		//return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.c finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 3 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.d finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 3
	}
	catch(e Excep2){
		catchCall =2
		//return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 32 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.e finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); //return x
	}
	catch(e Excep3){
		catchCall =3
		return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 888 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.f finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 3 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.ff finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		//return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 31 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.g finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); //return x
	}
	catch(e Excep3){
		catchCall =3
		return 3
	}
	catch(e Excep2){
		catchCall =2
		return 2
	}
	catch(e Excep1){
		catchCall =1
		//return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 8881 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.2.h finally - many catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x = mycall(fail, ff); //return x
	}
	catch(e Excep3){
		catchCall =3
		//return 3
	}
	catch(e Excep2){
		catchCall =2
		//return 2
	}
	catch(e Excep1){
		catchCall =1
		//return 1
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 888 } finally{ finNplus1() }
}

def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res = da2(fail, ff);
	return [catchCall res]
}

def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}



~~~~~
//##30.15.3.a finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	} } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.b finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		//throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.c finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.d finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		return mycall(fail, ff)
	}
	catch(e Excep3){
		catchCall =3
		//throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		//throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.e finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff);// return x
	}
	catch(e Excep3){
		catchCall =3
		throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.f finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); return x
	}
	catch(e Excep3){
		catchCall =3
		//throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.ff finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff); return x
	}
	catch(e Excep3){
		catchCall =3
		//throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		//throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.g finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff);// return x
	}
	catch(e Excep3){
		catchCall =3
		throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		//throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}

~~~~~
//##30.15.3.h finally - many catch, throws in catch, with no ret in finally, ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def callOnFinal1(){	fincnt+=1 }

def da2(fail boolean, ff int) int{
try{
	try{ 
		x= mycall(fail, ff);// return x
	}
	catch(e Excep3){
		catchCall =3
		//throw new Exception("")
	}
	catch(e Excep2){
		catchCall =2
		//throw new Exception("")
	}
	catch(e Excep1){
		catchCall =1
		//throw new Exception("")
	}
	finally{
		callOnFinal1()
		//return 90
	}
	return 1 } finally{ finNplus1() }
}


def doer(fail boolean, ff int) int[] {
	catchCall = 0
	res=-8;	try{ res = da2(fail, ff); }	catch(t Throwable){}
	return [catchCall res]
}


def doings() String{
	return "" + [ doer(true, 1), doer(false, 1),
				  doer(true, 2), doer(false, 2),
				  doer(true, 3), doer(false, 3),
				  fincnt ] + " :: " + finNestPlus1
}


~~~~~
//##30.15.4.s.a finally - branching inside the try, no fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
open class Excep1 extends Exception{}
open class Excep2 extends Excep1{}
open class Excep3 extends Excep2{}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 99; 	
}

def catchCall1(){ catchCall=1}
def catchCall2(){ catchCall=2}
def catchCall3(){ catchCall=3}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, ff int, v int) int{
try{
	try{ 
		if(v==1){
			 x= mycall(fail, ff);
			return x;
		}
	}
	catch(e Excep3){
		catchCall3()
		return 10
	}
	catch(e Excep2){
		catchCall2()
		return 10
	}
	catch(e Excep1){
		catchCall1()
		return 10
	}
	finally{
		callOnFinal1()
		
	}
	return 90 } finally{ finNplus1() }
}


def doer(fail boolean, ff int, v int) int[] {
	catchCall = 0
	res = da2(fail, ff, v);
	return [catchCall res]
}


def doings() String{
	return "" +  [doer(true, 1, 1), doer(false, 1, 1),
				  doer(true, 2, 1), doer(false, 2, 1),
				  doer(true, 3, 1), doer(false, 3, 1)] \ 
				  + "\n" + \ 
				  [doer(true, 1, 2), doer(false, 1, 2),
				  doer(true, 2, 2), doer(false, 2, 2),
				  doer(true, 3, 2), doer(false, 3, 2),] \ 
				  + "\n" + \ 
				  [doer(true, 1, 3), doer(false, 1, 3),
				  doer(true, 2, 3), doer(false, 2, 3),
				  doer(true, 3, 3), doer(false, 3, 3),] \ 
				  + "\n" + \ 
				  fincnt  + " :: " + finNestPlus1
				  
}


~~~~~
//##30.16 finally - many catch, with ret in finally, NO ret in main blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		catchCall++
		return 10
	}
	catch(e Throwable){
		catchCall++
		return 10
	}
	
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}


def doings() String{
	return "" + [ da2(true), da2(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.17 finally - return with nothing ret in the catch blcok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		catchCall++
	}
	
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true), da2(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.18 finally - return in fin with optional ret in catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, fail2 boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		if(fail2){
			return 20
		}
		catchCall++
	}
	
	finally{
		callOnFinal1()
		//return 90 - Non Normal Complete - we dont permit this
	}
	return 90 } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, false), da2(false, false),
				  da2(true, true), da2(false, true),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.19 finally - throws exception in finally - no ret in try - catches
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		mycall(fail)
	}
	catch(e Exception){
		catchCall++
	}
	
	finally{
		callOnFinal1()
		//throw new IntExcep(80) - Non Normal Complete - we dont permit this
	}
	throw new IntExcep(80) } finally{ finNplus1() }
}

def runner(a boolean) int{
	try{ return da2(a) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true), runner(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.20 finally - throws exception in finally - ret in try - catches
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	catch(e Exception){
		catchCall++
	}
	catch(e Throwable){
		catchCall++
		//return 10
	}
	finally{
		callOnFinal1()
		//throw new IntExcep(80) - Non Normal Complete - we dont permit this
	}
	throw new IntExcep(80) } finally{ finNplus1() }
}

def runner(a boolean) int{
	try{ return da2(a) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true), runner(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.21 finally - throws exception in finally - ret in try with brach - catches
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	catch(e Exception){
		catchCall++
		//return 10
	}
	catch(e Throwable){
		catchCall++
		//return 10
	}
	
	
	finally{
		callOnFinal1()
		//throw new IntExcep(80) - Non Normal Complete - we dont permit this
	}
	throw new IntExcep(80) } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##30.22 finally - throws exception in finally - no ret in try
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		mycall(fail)
	}
	finally{
		callOnFinal1()
		throw new IntExcep(80) 
	} } finally{ finNplus1() }
	//throw new IntExcep(80)
}

def runner(a boolean) int{
	try{ return da2(a) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true), runner(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.23 finally - throws exception in finally - ret in try
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean) int{
try{
	try{ 
		return mycall(fail)
	}
	finally{
		callOnFinal1()
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean) int{
	try{ return da2(a) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true), runner(false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.24 finally - throws exception in finally - ret in try with brach
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	finally{
		callOnFinal1()
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.25 finally - throws exception in finally - ret in try with brach - ret in catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	catch(e Exception){
		catchCall++
		return 10
	}
	
	finally{
		callOnFinal1()
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.26 finally - throws exception in catch - no finally
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}


def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	catch(e Exception){
		catchCall++
		throw new IntExcep(80)
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt,  catchCall] + " :: " + finNestPlus1
}


~~~~~
//##30.27 finally - throws exception in catch - with finally
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	catch(e Exception){
		catchCall++
		throw new IntExcep(80)
	}
	
	finally{
		callOnFinal1()
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##30.28 finally - both catch and finally throw exception with certainty
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	catch(e Exception){
		catchCall++
		throw new IntExcep(80)
	}
	
	finally{
		callOnFinal1()
		//throw new IntExcep(90) - Non Normal Complete - we dont permit this
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}



~~~~~
//##30.28b finally - both catch and finally throw exception with certainty no catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

class IntExcep(~valu int) extends Exception{
	override equals(o Object) boolean{return true;}
}

cnt = 0;
fincnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def callOnFinal1(){
	fincnt+=1
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			return mycall(fail)
		}
		else{ return 40 }
	}
	
	finally{
		callOnFinal1()
		throw new IntExcep(90) 
	} } finally{ finNplus1() }
}

def runner(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch(e IntExcep){
		return e.valu	
	}
}

def doings() String{
	return "" + [ runner(true, true), runner(false, true),
				runner(true, false), runner(false, false),
				  cnt, fincnt, catchCall] + " :: " + finNestPlus1
}






~~~~~
//##31.1 nest - no early ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			g += 1
		}
		catch(e Exception){
			catchCall++
		}
		finally{
			g+=1
			//throw new Exception("")
		}
	}
	catch(e Exception){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall] + " :: " + finNestPlus1
}

~~~~~
//##31.1 nest - no early ret b - excep
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			g += 1
			throw new Exception("");
		}
		catch(e Exception){
			catchCall++
		}
		finally{
			g+=1
			//throw new Exception("")
		}
	}
	catch(e Exception){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall] + " :: " + finNestPlus1
}


~~~~~
//##31.23 nest - haz early break for nesting
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
fincalls = 0

def fincall(){ fincalls++; }

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}
def xxx()=>true
def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			g += 1
			if(xxx()){return mycall(fail);}
			 gg = 9;
		}
		catch(e Exception){
			catchCall++
			return 23
		}
		catch(e Error){
			catchCall++
		}
		catch(e Throwable){
			catchCall++
		}
		finally{
			g+=1
			fincall()
			//throw new Exception("")
		}
	}
	catch(e Exception){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall, fincalls] + " :: " + finNestPlus1
}

~~~~~
//##31.23 nest - haz early break for nesting - double nest
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
fincalls = 0

def fincall(){ fincalls++; }
def xxx()=>true
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			try{ 
				g += 1
				if(xxx()){return mycall(fail);}
				 gg = 9;
			}
			catch(e Exception){
				catchCall++
				return 23
			}
			catch(e Error){
				catchCall++
			}
			catch(e Throwable){
				catchCall++
			}
			finally{
				g+=1
				fincall()
				//throw new Exception("")
			}
		}
		catch(e Exception){
			catchCall++
		}
	}
	catch(e Throwable){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall, fincalls] + " :: " + finNestPlus1
}

~~~~~
//##31.23 nest - haz early break for nesting - triple nest no fin
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
fincalls = 0

def fincall(){ fincalls++; }
def xxx()=>true
def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			try{ 
				g += 1
				if(xxx()){return mycall(fail);}
				 gg = 9;
			}
			catch(e Exception){
				catchCall++
				return 23
			}
			catch(e Error){
				catchCall++
			}
			catch(e Throwable){
				catchCall++
			}
		}
		catch(e Exception){
			catchCall++
		}
	}
	catch(e Throwable){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall, fincalls] + " :: " + finNestPlus1
}

~~~~~
//##31.1 nest - no early ret c - ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	try{ 
		try{ 
			g += 1
			return g
		}
		catch(e Exception){
			catchCall++
		}
		finally{
			g+=1
			//throw new Exception("")
		}
	}
	catch(e Exception){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall] + " :: " + finNestPlus1
}

~~~~~
//##31.2 nest - no early ret, throws in finally
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	g=0
	
	try{ 
		try{ 
			g += 1
		}
		catch(e Exception){
			catchCall++
		}
		finally{
			g+=1
			//throw new Exception("") - Non Normal Complete - we dont permit this
		}
		throw new Exception("")
	}
	catch(e Exception){
		catchCall++
	}
	
	return g } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
				  cnt,  catchCall] + " :: " + finNestPlus1
}



~~~~~
//##31.3 fin non defo return ensure that all the stuff is wrapped properly 1
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;
catchCall = 0;
finCnt=0

def catchCall1() {
	catchCall++
}
def finCall() {
	finCnt+=1
}

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			mycall(fail);
			return 20
		}
		mycall(fail);
		return 60
	}
	catch(e Exception){
		catchCall1()
	}
	finally{
		finCall()
	}
	
	return 10 } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
					da2(true, false), da2(false, false),
			    	  cnt, finCnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##31.3 fin non defo return ensure that all the stuff is wrapped properly 2 all elifs ret complex
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
finCnt=0

def catchCall1() {
	catchCall++
}
def finCall() {
	finCnt+=1
}

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean, f3 boolean) int{
try{
	try{ 
		if(f2){
			mycall(fail);
			return 90}
		elif(f3){
			mycall(fail);
			return 80
		}else{
			mycall(fail);
			return 60 
		}
	}
	catch(e Exception){
		catchCall1()
	}
	finally{
		finCall()
	}
	
	return 10 } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true, true), da2(false, true, true),
				  da2(true, false, true), da2(false, false, true),
				  da2(true, true, false), da2(false, true, false),
				  da2(true, false, false), da2(false, false, false),
			      cnt, finCnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##32.0 fin with no exception or ret - simple catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
finCnt=0

def catchCall1() {
	catchCall++
}
def finCall() {
	finCnt+=1
}

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			mycall(fail);
		}
		mycall(fail);
		return 60
	}
	catch(e Exception){
		xxx= e.getMessage().length()
		catchCall1()
	}
	catch(e Throwable){
		catchCall1()
	}
	finally{
		finCall()
	}
	
	return 10 } finally{ finNplus1() }
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
			    	  cnt, finCnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##32.1 fin with no exception or ret - complex catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
finCnt=0

def catchCall1() {
	catchCall++
}
def finCall() {
	finCnt+=1
}

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			mycall(fail);
		}
		mycall(fail);
		return 60
	}
	catch(e Exception){
		xxx= e.getMessage().length()
		if(f2){
			catchCall1()
		}
		catchCall1()
		return 80
	}
	catch(e Throwable){
		xxx= e.getMessage().length()
		if(f2){
			catchCall1()
		}
		catchCall1()
		return 80
	}
	finally{
		finCall()
	}
	 } finally{ finNplus1() }
	//return 10
}

def doings() String{
	return "" + [ da2(true, true), da2(false, true),
				da2(true, false), da2(false, false),
			    	  cnt, finCnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##32.2 fin with no exception or ret - no catches at all
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCall = 0;
finCnt=0

def catchCall1() {
	catchCall++
}
def finCall() {
	finCnt+=1
}

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		if(f2){
			mycall(fail);
		}
		mycall(fail);
		return 60
	}
	finally{
		finCall()
	} } finally{ finNplus1() }
}

def handle(a boolean, b boolean) int{
	try{ return da2(a,b) }
	catch( t Throwable){ return 99;} 
}

def doings() String{
	return "" + [ handle(true, true), handle(false, true),
				handle(true, false), handle(false, false),
			    	  cnt, finCnt, catchCall] + " :: " + finNestPlus1
}


~~~~~
//##33. nest simple
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;
catchCall = 0;

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def catchCall1() {
	catchCall++
}

def catchCall2() {
	catchCall++
}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			
		}
		catch(e Exception ){
			catchCall1()
			if(f2){
			throw e;}
		}
	}
	catch(e Exception ){
		catchCall2()
	}
	return 78 } finally{ finNplus1() }
}

def handle(a boolean, b boolean) int{
	try{ return da2(a, b) }
	catch( t Throwable){ return 99;} 
}

def doings() String{
	return "" + [ handle(true, true), handle(false, false),
	              handle(true, false), handle(false, true),
			    	  cnt, catchCall] + " :: " + finNestPlus1
}

~~~~~
//##33.1 nest simple - early ret in catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;
catchCall = 0;
catchcall2 = 0;
\also = 0

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def catchCall1() {
	catchCall++
}

def catchCall2() {
	catchcall2++
}

def catchCall3() {
	catchCall++
}

def da2(fail boolean, fail2 boolean, f2 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 80
		}
		catch(e Exception ){
			catchCall1()
			if(f2){ throw e;}
		}
		\also += 1
	}
	catch(e Exception ){
		catchCall2()
	}
	return 10 } finally{ finNplus1() }
}

def handle(a boolean, b boolean, c boolean) int{
	try{ return da2(a, b, c) }
	catch( t Throwable){ return 99;} 
}

def doings() String{
	return "" + [ handle(true, true, true), handle(false, true, true),
	              handle(true, false, true), handle(false, false, true),
	              handle(true, true, false), handle(false, true, false),
	              handle(true, false, false), handle(false, false, false),
	              cnt, \also, catchCall, catchcall2] + " :: " + finNestPlus1
}

~~~~~
//##33.2 nest simple - early ret in catch, catch ends in exception
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
cnt = 0;
catchCall = 0;
catchcall2 = 0;
\also = 0

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def catchCall1() {
	catchCall++
}

def catchCall2() {
	catchcall2++
}

def catchCall3() {
	catchCall++
}

def da2(fail boolean, fail2 boolean, f2 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 80
		}
		catch(e Exception ){
			catchCall1()
			if(f2){ throw e;}
		}
	}
	catch(e Throwable ){
		catchCall2()
	}
	return 10 } finally{ finNplus1() }
}

def handle(a boolean, b boolean, c boolean) int{
	try{ return da2(a, b, c) }
	catch( t Throwable){ return 99;} 
}

def doings() String{
	return "" + [ handle(true, true, true), handle(false, true, true),
	              handle(true, false, true), handle(false, false, true),
	              handle(true, true, false), handle(false, true, false),
	              handle(true, false, false), handle(false, false, false),
	              cnt, \also, catchCall, catchcall2] + " :: " + finNestPlus1
}


~~~~~
//##33.3 nest simple - early ret in catch, catch ends in exception - many with also
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCallv = 0;
catchCallv2 = 0;
catchCallv3 = 0;
\also = 0

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def catchCall1() {	catchCallv++}
def catchCall2() {	catchCallv2++}
def catchCall3() {	catchCallv3++}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Exception ){
			catchCall1()
			if(f2){ throw e;}
		}
		catch(e Throwable ){
			catchCall2();
		}
		\also += 1
	}
	catch(e Exception ){
		catchCall3()
	}
	catch(e Throwable ){
		catchCall3();
	}
	return 2 } finally{ finNplus1() }
}

def handle(a boolean, b boolean ) int {
	try{ return da2(a,b)}
	catch(e Exception){ return 0 }
} 

def doings() String{
	return "" + [ handle(true,  true),
		 		  handle(false, true),
		 		  handle(true,  false),
		 		  handle(false, false),
			      cnt, \also, catchCallv, catchCallv2, catchCallv3] + " :: " + finNestPlus1
}

~~~~~
//##33.4 nest simple - early ret in catch, catch ends in exception - many NO also
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

cnt = 0;
catchCallv = 0;
catchCallv2 = 0;
catchCallv3 = 0;
\also = 0

def mycall(fail boolean) int {
	if(fail){ throw new Exception("") }
	return ++cnt; 
}

def catchCall1() {	catchCallv++}
def catchCall2() {	catchCallv2++}
def catchCall3() {	catchCallv3++}

def da2(fail boolean, f2 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Exception ){
			catchCall1()
			if(f2){ throw e;}
		}
		catch(e Throwable ){
			catchCall2();
		}
	}
	catch(e Exception ){
		catchCall3()
	}
	catch(e Throwable ){
		catchCall3();
	}
	return 2 } finally{ finNplus1() }
}

def handle(a boolean, b boolean ) int {
	try{ return da2(a,b)}
	catch(e Exception){ return 0 }
} 

def doings() String{
	return "" + [ handle(true,  true),
		 		  handle(false, true),
		 		  handle(true,  false),
		 		  handle(false, false),
			      cnt, \also, catchCallv, catchCallv2, catchCallv3] + " :: " + finNestPlus1
}

~~~~~
//##33.5 nest simple - with fins 1
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
catchCalll1  = 0
catchCalll2  = 0
f1=0; f2=0;

def catchCall1() {	catchCalll1++}
def catchCall12() {	catchCalll2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean) int {
	if(fail){ 
		throw new Excep2();	
	}
	return 888; 
}

def da2(fail boolean, f3 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Excep2){
			catchCall1();
			if(f3){ throw e;}
		}
		catch(he Excep1){
		}
		//finally{  f1++; }
		a=1 //rm me!
	}
	catch(e Exception){
		catchCall12();
	}
	finally{  f2++; }
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, f3 boolean) int[] {
	catchCalll1 = 0;
	catchCalll2 = 0;
	res=-8;	try{ res = da2(fail, f3); }	catch(t Throwable){}
	return [catchCalll1 catchCalll2 res]
} 


def doings() String{
	return "" + [ doer(true, true),
				  doer(true, false),
				  doer(false, true),
				  doer(false, false)] + "\n" + \ 
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##33.5 nest simple - with fins 2a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
f1=0; f2=0;

def catchCall1() {	catchCalll1++}
def catchCall12() {	catchCalll2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean) int {
	if(fail){ 
		throw new Excep2();	
	}
	return 888; 
}

def da2(fail boolean, f3 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Excep2){
			catchCall1();
			if(f3){ throw e;}
		}
		catch(he Excep1){
		 
		}
		finally{  f1++; }
	}
	catch(e Exception){
		catchCall12();
	}
	catch(e Throwable){
		catchCall12();
	}
	finally{  f2++; }
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, f3 boolean) int[] {
	catchCalll1 = 0;
	catchCalll2 = 0;
	res=-8;	try{ res = da2(fail, f3); }	catch(t Throwable){}
	return [catchCalll1 catchCalll2 res]
} 


def doings() String{
	return "" + [ doer(true, true),
				  doer(true, false),
				  doer(false, true),
				  doer(false, false)] + "\n" + \ 
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##33.5 nest simple - with fins 2b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
f1=0; f2=0;

def catchCall1() {	catchCalll1++}
def catchCall12() {	catchCalll2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean) int {
	if(fail){ 
		throw new Excep2();	
	}
	return 888; 
}

def da2(fail boolean, f3 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Excep2){
			catchCall1();
			if(f3){ throw e;}
		}
		catch(he Excep1){
		 
		}
		finally{  f1++; }
	}
	catch(e Exception){
		catchCall12();
	}
	catch(e Throwable){
		catchCall12();
	}
	//finally{  f2++; }
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, f3 boolean) int[] {
	catchCalll1 = 0;
	catchCalll2 = 0;
	res=-8;	try{ res = da2(fail, f3); }	catch(t Throwable){}
	return [catchCalll1 catchCalll2 res]
} 


def doings() String{
	return "" + [ doer(true, true),
				  doer(true, false),
				  doer(false, true),
				  doer(false, false)] + "\n" + \ 
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##33.5 nest simple - with fins 2c
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
f1=0; f2=0;

def catchCall1() {	catchCalll1++}
def catchCall12() {	catchCalll2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean) int {
	if(fail){ 
		throw new Excep2();	
	}
	return 888; 
}

def da2(fail boolean, f3 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(e Excep2){
			catchCall1();
			if(f3){ throw e;}
		}
		catch(he Excep1){
		 
		}
		//finally{  f1++; }
	}
	catch(e Exception){
		catchCall12();
	}
	catch(e Throwable){
		catchCall12();
	}
	finally{  f2++; }
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, f3 boolean) int[] {
	catchCalll1 = 0;
	catchCalll2 = 0;
	res=-8;	try{ res = da2(fail, f3); }	catch(t Throwable){}
	return [catchCalll1 catchCalll2 res]
} 


def doings() String{
	return "" + [ doer(true, true),
				  doer(true, false),
				  doer(false, true),
				  doer(false, false)] + "\n" + \ 
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##0.3 reboot - something rather complex with double nesting
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }


cnt = 0;
catchCall = 0;
catchCallb = 0;
catchCall2g = 0;
\also = 0

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}
open class Excep3 extends Excep2{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
		if(ff == 3){ throw new Excep3(); }	
	}
	return 888; 
}

def catchCall1() {	catchCall++}
def catchCall2() {	catchCall++}
def catchCall3() {	catchCall++}

def catchCall1b() {	catchCallb++}
def catchCall2b() {	catchCallb++}
def catchCall3b() {	catchCallb++}

def catchCall12() {	catchCall2g++}
def catchCall22() {	catchCall2g++}
def catchCall32() {	catchCall2g++}


def da2(fail boolean, ff int, f3 boolean, f4 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, ff)
			return 9
		}
		catch(e Excep3){
			catchCall3();
			if(f3){ throw e;}
		}
		catch(e Excep2){
			catchCall2();
			if(f3){ throw e;}
		}
		catch(e Excep1){
			catchCall1();
			if(f3){ throw e;}
		}
		\also += 1
			
		if(f4){
			return 6;
		}
		
		try{ 
			mycall(fail, ff)
			return 8
		}
		catch(e Excep3){
			catchCall3b();
			if(f3){ throw e;}
		}
		catch(e Excep2){
			catchCall2b();
			if(f3){ throw e;}
		}
		catch(e Excep1){
			catchCall1b();
			if(f3){ throw e;}
		}
	}
	catch(e Excep3){
		catchCall32();
	}
	catch(e Excep2){
		catchCall22();
	}
	catch(e Excep1){
		catchCall12();
	}
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, ff int, f3 boolean, f4 boolean) int[] {
	catchCall = 0;
	catchCallb = 0;
	catchCall2g = 0;
	res=-8;	try{ res = da2(fail, ff, f3, f4); }	catch(t Throwable){}
	return [catchCall catchCallb catchCall2g res]
} 

def doings() String{
	return "" + [ doer(true, 1, true, true),
				  doer(true, 1, true, false),
				  doer(true, 1, false, true),
				  doer(true, 1, false, false),
				  doer(false, 1, true, true),
				  doer(false, 1, true, false),
				  doer(false, 1, false, true),
				  doer(false, 1, false, false),] + "\n" +  \
				  [ doer(true, 1, true, true),
				  doer(true, 2, true, false),
				  doer(true, 2, false, true),
				  doer(true, 2, false, false),
				  doer(false, 2, true, true),
				  doer(false, 2, true, false),
				  doer(false, 2, false, true),
				  doer(false, 2, false, false),] + "\n" + \
				  [ doer(true, 2, true, true),
				  doer(true, 3, true, false),
				  doer(true, 3, false, true),
				  doer(true, 3, false, false),
				  doer(false, 3, true, true),
				  doer(false, 3, true, false),
				  doer(false, 3, false, true),
				  doer(false, 3, false, false),] + "\n" +  \ 
				  \also + " :: " + finNestPlus1
}
~~~~~
//##0.4 reboot - simple nesting
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll1b  = 0
catchCalll2  = 0
f1=0; f2=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll1b++}
def catchCall12() {	catchCalll2++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean) int {
	if(fail){ 
		throw new Excep2();	
	}
	return 888; 
}

def da2(fail boolean, f3 boolean) int{
try{
	try{ 
		try{ 
			mycall(fail)
			return 9
		}
		catch(he Excep2){
			catchCall2();
		}
		catch(he Excep1){
			catchCall1();
		}
		//finally{  fincall1(); }
	}
	catch(e Exception){
		catchCall12();
	}
	catch(e Throwable){
		catchCall12();
	}
	
	
	return 2 } finally{ finNplus1() }
}

def doer(fail boolean, f3 boolean) int[] {
	catchCalll1 = 0;
	catchCalll1b=0;
	catchCalll2 = 0;
	res=-8;	try{ res = da2(fail, f3); }	catch(t Throwable){}
	return [catchCalll1 catchCalll1b catchCalll2 res]
} 


def doings() String{
	return "" + [ doer(true, true),
				  doer(true, false),
				  doer(false, true),
				  doer(false, false)] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##34.1 nest - fin comb- throws 1
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
			if(throwa){ throw he; } 
		}
		catch(he Excep1){
			catchCall1a();
			if(throwa){ throw he; } 
		}
		finally{  fincall1(); }
		x=8
	}
	catch(e Excep2){
		catchCall2b();
	}
	catch(e Excep1){
		catchCall1b();
	}
	finally{  fincall2(); 
		//throw new Exception("lawlaw"); - Non Normal Complete - we dont permit this
	  }
	  throw new Exception("lawlaw"); } finally{ finNplus1() }
	 // return 2
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Throwable){}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##34.1 nest - fin comb- throws 2 - exception in both
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
			if(throwa){ throw he; } 
		}
		catch(he Excep1){
			catchCall1a();
			if(throwa){ throw he; } 
		}
		finally{  fincall1(); 
			//throw new Exception("lawlaw"); - Non Normal Complete - we dont permit this
		}
		throw new Exception("lawlaw");
	}
	catch(e Excep2){
		catchCall2b();
	}
	catch(e Excep1){
		catchCall1b();
	}
	finally{  fincall2(); 
		//throw new Exception("lawlaw2"); - Non Normal Complete - we dont permit this
	  }
	  throw new Exception("lawlaw2"); } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if t.getMessage() == "lawlaw2" else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##35.1 nest - fin comb- return 1 null 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
			if(throwa){ throw he; } 
		}
		catch(he Excep1){
			catchCall1a();
			if(throwa){ throw he; } 
		}
		finally{  
			fincall1(); 
			//return 66 - Non Normal Complete - we dont permit this
		}
		return 66
	}
	catch(e Excep2){
		catchCall2b();
	}
	catch(e Excep1){
		catchCall1b();
	}
	finally{  
		fincall2(); 
		//return 77
	  }
	 return 8 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if t.getMessage() == "lawlaw2" else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##35.2 nest - fin comb- return 1 return 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
			if(throwa){ throw he; } 
		}
		catch(he Excep1){
			catchCall1a();
			if(throwa){ throw he; } 
		}
		finally{  
			fincall1(); 
			//return 66 - Non Normal Complete - we dont permit this
		}
		return 66
	}
	catch(e Excep2){
		catchCall2b();
	}
	catch(e Excep1){
		catchCall1b();
	}
	finally{  
		fincall2(); 
		//return 77 - Non Normal Complete - we dont permit this
	  }
	  return 77 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if t.getMessage() == "lawlaw2" else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##35.3 nest - fin comb- null 1 return 2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
			if(throwa){ throw he; } 
		}
		catch(he Excep1){
			catchCall1a();
			if(throwa){ throw he; } 
		}
		finally{  
			fincall1(); 
			//return 66
		}
	}
	catch(e Excep2){
		catchCall2b();
	}
	catch(e Excep1){
		catchCall1b();
	}
	finally{  
		fincall2(); 
		//return 77 - Non Normal Complete - we dont permit this
	  }
	return 77 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa); }	catch(t Exception){ res = -1 if t.getMessage() == "lawlaw2" else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" + [ doer(true, 1, true),   doer(true, 2, true),  doer(true, 3, true), ]+ "\n" + \
				  [doer(true, 1, false), doer(true, 2, false), doer(true, 3, false), ]+ "\n" + \
				  [doer(false, 1, true), doer(false, 2, true), doer(false, 3, true), ]+ "\n" + \
				  [doer(false, 1, false),doer(false, 2, false),doer(false, 3, false)   ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##36.1 nest - no catches
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		finally{  
			fincall1(); 
			//return 66 - Non Normal Complete - we dont permit this
		}
	}
	finally{  fincall2();
			//return 77 - Non Normal Complete - we dont permit this
	  } } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##36.2 nest - no catches, no ret on first
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		finally{  
			fincall1(); 
			//return 66 - Non Normal Complete - we dont permit this
		}
	}
	finally{  fincall2();
			//return 77 - Non Normal Complete - we dont permit this
	  } } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##36.3 nest - no catches, no ret on any
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }


catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		finally{  
			fincall1(); 
		}
	}
	finally{  fincall2();
	  } } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##36.4 nest - odd case
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			if(theOne==4){
				mycall(fail, theOne);
				return 9;
			}
			elif(theOne==4){
				mycall(fail, theOne);
				return 9;
			}
			else{
				mycall(fail, theOne);
				return 9;
			}
		}
		finally{  
			fincall1(); 
			//return 66 - Non Normal Complete - we dont permit this
		}
	}
	finally{  fincall2();
	  } } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##37. ensure that visit ranges are correctly gennerated to be the end of the final return statement
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(he Excep2){
			catchCall2a();
		}
		finally{  
			fincall1();
		}
	}
	catch(e Excep2){
		catchCall2b();
	}
	return 8 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}




~~~~~
//##38. captured nested thingy watch out in the catch
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1(); 
		}
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##39. captured nested thingy watch out in the catch no fin first
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##40. dunno abot this but works ok
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			//return 7
		}
		finally{  
			fincall1(); 
			
		}
		return 8
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##41. nest- first fin defo excep
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1(); 
			//return 8
			//throw new RuntimeException(""); - Non Normal Complete - we dont permit this 
		}
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}


~~~~~
//##42. nest - branch oddness
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1(); 
			//if(fail){			return 8 }- Non Normal Complete - we dont permit this
			//throw new RuntimeException(""); - Non Normal Complete - we dont permit this
		}
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##43. nest - more branch oddness
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1();
			
			if(fail){			 }//NO RET IN HERE - Non Normal Complete - we dont permit this
			else {	g =9;	} 
		}
		
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##43. nest - more branch oddness branch in fin, non def ret
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			return 9
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1(); 
			if(fail){			 }
			else {	g =9;	}
		}
		
	}
	finally{  fincall2();
	} } finally{ finNplus1() }
	
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##44. nest - more branch oddness branch in main block
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			mycall(fail, theOne)
			if(throwa){		return 9 }
		}
		catch(e ){
			return 7
		}
		finally{  
			fincall1(); 
			if(fail){	g=9		 }
			else {	g =9;	}
		}
	}
	finally{  fincall2();
	}
	return 9 } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##45. nest - simple cases with fin -1
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }


catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			if(theOne==4){
				
				return mycall(fail, theOne);
			}
			elif(theOne==4){
				return mycall(fail, theOne);
			}
		}
		finally{  
			fincall1(); 
		}
	}
	finally{  fincall2();
	  }
	  
	 return 8; } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}

~~~~~
//##45. nest - simple cases with fin -2
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }


catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			if(theOne==4){
				
				return mycall(fail, theOne);
			}
			elif(theOne==4){
				return mycall(fail, theOne);
			}
		}
		finally{  
			fincall1(); 
		}
	}
	finally{  //fincall2();
	  }
	  
	 return 8; } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}



~~~~~
//##45. nest - simple cases with fin -3
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }


catchCalll2a  = 0
catchCalll2b  = 0
catchCalll1a  = 0
catchCalll1b  = 0
f1=0; f2=0;

def catchCall2a() {	catchCalll2a++}
def catchCall2b() {	catchCalll2b++}
def catchCall1a() {	catchCalll1a++}
def catchCall1b() {	catchCalll1b++}

def fincall1() {	f1++}
def fincall2() {	f2++}

open class Excep1 extends Exception{override equals(o Object) boolean { return true;}}
open class Excep2 extends Excep1{override equals(o Object) boolean { return true;}}

def mycall(fail boolean, ff int) int {
	if(fail){ 
		if(ff == 1){ throw new Excep1(); }	
		if(ff == 2){ throw new Excep2(); }	
	}
	return 888; 
}

def da2(fail boolean, theOne int, throwa boolean, doit boolean) int{
try{
	try{ 
		try{ 
			if(theOne==4){
				
				return mycall(fail, theOne);
			}
			elif(theOne==4){
				return mycall(fail, theOne);
			}
		}
		finally{  
			//fincall1(); 
		}
	}
	finally{  fincall2();
	  }
	  
	 return 8; } finally{ finNplus1() }
}

def doer(fail boolean, theOne int, throwa boolean, doit boolean) int[] {
	catchCalll2a  = 0
	catchCalll2b  = 0
	catchCalll1a  = 0
	catchCalll1b  = 0
	res=-8;	try{ res = da2(fail, theOne, throwa, doit); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1a catchCalll2a catchCalll1b catchCalll2b res]
} 

def doings() String{
	return "" +   [doer(true, 1, true, true),   doer(true, 2, true, true),  doer(true, 3, true, true), ]+ "\n" + \
				  [doer(true, 1, false, true),  doer(true, 2, false, true), doer(true, 3, false, true), ]+ "\n" + \
				  [doer(false, 1, true, true),  doer(false, 2, true, true), doer(false, 3, true, true), ]+ "\n" + \
				  [doer(false, 1, false, true), doer(false, 2, false, true),doer(false, 3, false, true) ] + "\n" + \
				  [doer(true, 1, true, false),   doer(true, 2, true, false),  doer(true, 3, true, false), ]+ "\n" + \
				  [doer(true, 1, false, false),  doer(true, 2, false, false), doer(true, 3, false, false), ]+ "\n" + \
				  [doer(false, 1, true, false),  doer(false, 2, true, false), doer(false, 3, true, false), ]+ "\n" + \
				  [doer(false, 1, false, false), doer(false, 2, false, false),doer(false, 3, false, false) ] + "\n" + \
				  [ f1, f2 ] + " :: " + finNestPlus1
}






~~~~~
//##46. nest - check all fins get correctly called - a
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
catchCalll3  = 0
f1=0; f2=0; f3=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll2++}
def catchCall3() {	catchCalll3++}

def fincall1() {	f1++}
def fincall2() {	f2++}
def fincall3() {	f3++}

def mycall(fail boolean) int {
	if(fail){ throw new RuntimeException(); } return 888; 
}

def da2(fail boolean) int{
try{
	try{ 
		try{ 
			try{ 
				return mycall(fail)
			}
			finally{  
				fincall1();
			}
		}
		finally{  
		    x=89; y=x; fincall2();
		}
	}
	finally{  
		fincall3();
	} } finally{ finNplus1() }
}

def doer(fail boolean) int[] {
	catchCalll1  = 0
	catchCalll2  = 0
	catchCalll3  = 0
	res=-8;	try{ res = da2(fail); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1 catchCalll2 catchCalll3 res]
} 

def doings() String{
	return "" +   [doer(true),   doer(false) ]+ " :: " +[ f1, f2, f3 ] + " :: " + finNestPlus1
}

~~~~~
//##46. nest - check all fins get correctly called - b
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
catchCalll3  = 0
f1=0; f2=0; f3=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll2++}
def catchCall3() {	catchCalll3++}

def fincall1() {	f1++}
def fincall2() {	f2++}
def fincall3() {	f3++}

def mycall(fail boolean) int {
	if(fail){ throw new RuntimeException(); } return 888; 
}

def da2(fail boolean) int{
try{
	try{ 
		try{ 
			try{ 
				return mycall(fail)
			}
			finally{  
				//fincall1();
			}
		}
		finally{  
		    x=89; y=x; fincall2();
		}
	}
	finally{  
		fincall3();
	} } finally{ finNplus1() }
}

def doer(fail boolean) int[] {
	catchCalll1  = 0
	catchCalll2  = 0
	catchCalll3  = 0
	res=-8;	try{ res = da2(fail); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1 catchCalll2 catchCalll3 res]
} 

def doings() String{
	return "" +   [doer(true),   doer(false) ]+ " :: " +[ f1, f2, f3 ] + " :: " + finNestPlus1
}

~~~~~
//##46. nest - check all fins get correctly called - c
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
catchCalll3  = 0
f1=0; f2=0; f3=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll2++}
def catchCall3() {	catchCalll3++}

def fincall1() {	f1++}
def fincall2() {	f2++}
def fincall3() {	f3++}

def mycall(fail boolean) int {
	if(fail){ throw new RuntimeException(); } return 888; 
}

def da2(fail boolean) int{
try{
	try{ 
		try{ 
			try{ 
				return mycall(fail)
			}
			finally{  
				fincall1();
			}
		}
		finally{  
		    x=89; y=x; fincall2();
		}
	}
	finally{  
		//fincall3();
	} } finally{ finNplus1() }
}

def doer(fail boolean) int[] {
	catchCalll1  = 0
	catchCalll2  = 0
	catchCalll3  = 0
	res=-8;	try{ res = da2(fail); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1 catchCalll2 catchCalll3 res]
} 

def doings() String{
	return "" +   [doer(true),   doer(false) ]+ " :: " +[ f1, f2, f3 ] + " :: " + finNestPlus1
}

~~~~~
//##46. nest - check all fins get correctly called - d
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
catchCalll3  = 0
f1=0; f2=0; f3=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll2++}
def catchCall3() {	catchCalll3++}

def fincall1() {	f1++}
def fincall2() {	f2++}
def fincall3() {	f3++}

def mycall(fail boolean) int {
	if(fail){ throw new RuntimeException(); } return 888; 
}

def da2(fail boolean) int{
try{
	try{ 
		try{ 
			try{ 
				return mycall(fail)
			}
			finally{  
				fincall1();
			}
		}
		finally{  
		    //x=89; y=x; fincall2();
		}
	}
	finally{  
		fincall3();
	} } finally{ finNplus1() }
}

def doer(fail boolean) int[] {
	catchCalll1  = 0
	catchCalll2  = 0
	catchCalll3  = 0
	res=-8;	try{ res = da2(fail); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1 catchCalll2 catchCalll3 res]
} 

def doings() String{
	return "" +   [doer(true),   doer(false) ]+ " :: " +[ f1, f2, f3 ] + " :: " + finNestPlus1
}

~~~~~
//##46. nest - check all fins get correctly called - e
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }

catchCalll1  = 0
catchCalll2  = 0
catchCalll3  = 0
f1=0; f2=0; f3=0;

def catchCall1() {	catchCalll1++}
def catchCall2() {	catchCalll2++}
def catchCall3() {	catchCalll3++}

def fincall1() {	f1++}
def fincall2() {	f2++}
def fincall3() {	f3++}

def mycall(fail boolean) int {
	if(fail){ throw new RuntimeException(); } return 888; 
}

def da2(fail boolean) int{
try{
	try{ 
		try{ 
			try{ 
				return mycall(fail)
			}
			finally{  
				//fincall1();
			}
		}
		finally{  
		    //x=89; y=x; fincall2();
		}
	}
	finally{  
		fincall3();
	} } finally{ finNplus1() }
}

def doer(fail boolean) int[] {
	catchCalll1  = 0
	catchCalll2  = 0
	catchCalll3  = 0
	res=-8;	try{ res = da2(fail); }	catch(t Exception){ res = -1 if "lawlaw2"==t.getMessage() else -2;}
	return [catchCalll1 catchCalll2 catchCalll3 res]
} 

def doings() String{
	return "" +   [doer(true),   doer(false) ]+ " :: " +[ f1, f2, f3 ] + " :: " + finNestPlus1
}

~~~~~
//##50. extra - non defo excep but more than one
finNestPlus1 = 0; def finNplus1() { finNestPlus1++ }
def exceper(h int) String {
try{
	ret = "";
	try{
		if(h==1){
			throw new Exception("ughExcep");
		}
		elif(h==2){
			throw new Throwable("ughTrh");
		}
	}
	catch(e Exception){
		ret = "Exception thrown" + e;
	}
	catch(e Throwable){
		ret = "Throwable thrown" + e;
	}
	
	return ret;
	} finally{ finNplus1() }
}
def doings() String {
	return exceper(1) + ":" +exceper(2) + ":" + exceper(3)+ " :: " + finNestPlus1
}