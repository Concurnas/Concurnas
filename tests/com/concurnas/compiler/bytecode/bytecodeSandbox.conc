def doings(){
	def returnsNullable() String? => null
	
	nullabeVar String? = returnsNullable()
	
	len = if( nullabeVar <> null ){
		nullabeVar.length()
	}else{
		-1
	}
	
	"" + len
}


/*
def log(fmtString String, args Object...){//args is a vararg
	System.out.println(String.format(fmtString, args))
}


from java.util import Random
from java.time import LocalDateTime

class Point(-dateTime LocalDateTime, -price double)

def createData(seed = 1337){//seed is an optional parameter with a default value
	rnd = new Random(seed)
	startTime = LocalDateTime.\of(2020, 1, 1, 0, 0)//midnight 1st jan 2020
	price = 100.
	
	def rnd2dp(x double) => Math.round(x*100)/100. //nested function
	
	ret = list()
	for(sOffset in 0 to 60*60*24){//'x to y' - an integer range
		time = startTime.plusSeconds(sOffset)
		ret.add(Point(time, price))
		price += rnd2dp(rnd.nextGaussian()*0.01)
	}

	ret
}

def doings(){
	timeseries = createData()
	
	prices = t.price for t in timeseries
	
	min = max Double? = null
	for(price in prices){
		if(min == null or price < min){
			min = price
		}else if(max == null or price > max){
			max = price
		}
	}
	
	log("min: %.2f max: %.2f", min, max)
	
	"ok"
	
	//"" + String.join("\n ", ""+ps)
}
*/

/*
from java.util import Random
from java.time import LocalDateTime

def createData(){
	rnd = new Random(1337)

	startTime = LocalDateTime.\of(2020, 1, 1, 0, 0)//midnight 1st jan 2020
	return startTime.plusSeconds(s) for s in 0 to 60*60*24
}


def doings(){

	""+createData()[1 ... 10].getSecond()
}
*/


/*
from com.sun.net.httpserver import HttpServer

def doings(){
	srv = HttpServer.create()
	"" + srv
}
*/


/*
gpukernel 2 matMult(M int, N int, K int, global in A float[2], global in B float[2], global out C float[2]) {
    globalRow = get_global_id(0) // Row ID of C (0..M)
    globalCol = get_global_id(1) // Col ID of C (0..N)
 
    // Compute a single element (loop over K)
    acc = 0.0f;
    for (k=0; k<K; k++) {
		acc += A[k*M + globalRow] * B[globalCol*K + k]
    }
    // Store the result
    C[globalCol*M + globalRow] = acc;
}


def firstGPU(gpuDev gpus.DeviceGroup[], cpuDev gpus.DeviceGroup[]) {
	if(not gpuDev){
		cpuDev[0]
	}else{
		for(grp in gpuDev){
			if('Intel' not in grp.platformName){
				return grp
			}
		}
		gpuDev[0]
	}
}

def doings(){
	gps = gpus.GPU()
	cpus = gps.getCPUDevices()
	deviceGrp = firstGPU(gps.getGPUDevices(), cpus)
	device = deviceGrp.devices[0]
	inGPU1 = device.makeOffHeapArrayIn(float[2].class, 2, 2)
	inGPU2 = device.makeOffHeapArrayIn(float[2].class, 2, 2)
	result = device.makeOffHeapArrayOut(float[2].class, 2, 2)
	
	x = [ 1.f 2 ; 3.f 4]
	
	c1 := inGPU1.writeToBuffer(x)
	c2 := inGPU2.writeToBuffer(x)
	
	inst = matMult(2, 2, 2, inGPU1, inGPU2, result)
	compute := device.exe(inst, [2 2], c1, c2)//rest param detault
	//remove null
	
	ret = result.readFromBuffer(compute)
	
	del inGPU1, inGPU2, result
	del c1, c2, compute
	del deviceGrp, device
	del inst
	
	
	'nice: ' + ret
}
*/
